@startuml


class NoSenseController {
    -String sessionId
    -Sentence inputSentence
    -String templateSentence
    -Sentence generatedSentence
    -ArrayList<ToxicityResultToken> toxicityResultTokens
    -String graphImageName
    -ArrayList<String> nouns
    -ArrayList<String> verbs
    -ArrayList<String> adjectives
    -boolean requestSyntacticTree
    -String selectedTime
    -Generator generator
    +NoSenseController()
    +void initializeSession(HttpSession session, Model model)
    +String index(Model model)
    +String analyzeInputSentence(String sessionId, String sentence, boolean requestSyntacticTree, Model model, RedirectAttributes redirectAttributes)
    +String generateTemplateSentence(Model model, RedirectAttributes redirectAttributes)
    +String generateSentence(String tense, String templateSentence, Sentence inputSentence, Model model, RedirectAttributes redirectAttributes)
    +String saveTerms(Sentence inputSentence, Model model, RedirectAttributes redirectAttributes)
    +String clearSession(SessionStatus sessionStatus)
    +String analyzeToxicity(Sentence generatedSentence, Model model, RedirectAttributes redirectAttributes)
    +ResponseEntity<Resource> serveDependencyGraphImage(String fileName)
}
note left of NoSenseController
    Some of this attributes are used to store the state of the session.
end note


class Nouns {
    -ArrayList<String> nouns
    -int generatedNumber
    -String filePath
    +Nouns()
    +String getNoun()
    +int save(ArrayList<String> nounsForFile)
}

class Verbs {
    -ArrayList<String> verbsPresent
    -ArrayList<String> verbsPast
    -ArrayList<String> verbsFuture
    -int generatedNumber
    -String filePathPresent
    -String filePathPast
    -String filePathFuture
    +Verbs()
    +String getVerb(String time)
    +int save(String time, ArrayList<String> verbsForFile)
}

class Adjectives {
    -ArrayList<String> adjectives
    -int generatedNumber
    -String filePath
    +Adjectives()
    +String getAdjective()
    +int save(ArrayList<String> adjectivesForFile)
}

class Sentence {
    -String text
    -ArrayList<AnalysisResultToken> analysisResultTokens
    -ArrayList<ToxicityResultToken> toxicityResultTokens
    +Sentence(String text)
    +String getText()
    +void setText(String text)
    +ArrayList<String> getVerbs(String tense)
    +ArrayList<String> getNouns()
    +ArrayList<String> getAdjectives()
    +ArrayList<AnalysisResultToken> getAnalysisResultTokens()
    +void setAnalysisResultTokens(ArrayList<AnalysisResultToken> analysisResultTokens)
    +ArrayList<ToxicityResultToken> getToxicityResultTokens()
    +void setToxicityResultTokens(ArrayList<ToxicityResultToken> toxicityResultTokens)
    +boolean isTextBlank()
}


class Generator {
    -ArrayList<String> templates
    -Nouns nouns
    -Verbs verbs
    -Adjectives adjectives
    -String filePath
    +Generator()
    +String generateTemplateSentence()
    +Sentence fillTemplateSentence(String template, Sentence inputSentence, String time)
    +int saveFromSentence(Sentence input)
}

class Analyzer {
    -static String apiKey
    +void setEnvironment(Environment environment)
    +static ArrayList<AnalysisResultToken> analyzeSyntax(String sentence)
    +static ArrayList<ToxicityResultToken> analyzeToxicity(String sentence)
}

class AnalysisResultToken {
    -int index
    -String text
    -String tag
    -String tense
    -String dependencyLabel
    -int dependencyToken
    +AnalysisResultToken(int index, String text, String tag, String dependencyLabel, int dependencyToken, String tense)
    +int getIndex()
    +String getText()
    +String getTag()
    +String getTense()
    +String getDependencyLabel()
    +int getDependencyToken()
}


class FileHandler {
    +static int save(ArrayList<String> terms, ArrayList<String> termsForFile, String filePath)
    +static ArrayList<String> load(String filePath)
}

class ToxicityResultToken {
    -String name
    -Double confidence
    +ToxicityResultToken(String name, Double confidence)
    +String getName()
    +Double getConfidence()
    +int getConfidencePercentage()
}

package "Graphviz" {
    class GraphvizRenderer {
        -static final String DOT_FILE_PATH
        -static final String PNG_FILE_PATH
        -static final String WEB_PATH
        +static String RenderDependencyGraph(String fileName)
    }

    class GraphvizGenerator {
        +static void GenerateDependencyGraph(ArrayList<AnalysisResultToken> tokens, String fileName)
        -static final String TAB
        -static final String FILE_PATH
        -static final String NODE_TEMPLATE
        -static final String LABEL_TEMPLATE
        -static final String EDGE_TEMPLATE
        -static final String CONTROL_NODE
        -static final String GRAPH_TEMPLATE
        -static final List<String> colors
        -static String FillNodeTemplate(AnalysisResultToken token)
        -static String FillLabelTemplate(AnalysisResultToken token)
        -static String FillEdgeTemplate(String tail, String head, String tailPort, String headPort, String options)
        -static String FillControlNode(AnalysisResultToken token, String color)
        -static String ConnectWithControlNode(AnalysisResultToken token, String color)
        -static String FillGraphTemplate(String _nodes, String _dependencies, String _subgraph, String _controlNodes)
        -static int getNextColor(int _color_index)
    }

}


NoSenseController "1" *-- "many" Sentence : contains
Generator -->Sentence : generates
NoSenseController --> Analyzer : uses
Analyzer --> Sentence : analyzes
Generator "1" *-- "1" Nouns : contains and instantiates
Generator "1" *-- "1" Verbs : contains and instantiates
Generator "1" *-- "1" Adjectives : contains and instantiates
NoSenseController "1" *-- "1" Generator : contains and instantiates
Nouns  --> FileHandler : uses
Verbs  --> FileHandler : uses
Adjectives  --> FileHandler : uses
Generator  --> FileHandler : uses
Sentence "1" *-- "many" AnalysisResultToken : contains
Sentence "1" *-- "many" ToxicityResultToken : contains
NoSenseController --> "Graphviz":uses
@enduml
